/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*65-90, 97-122*/
package passcrypt_gui;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseAdapter;
import javax.swing.JOptionPane;
import org.jasypt.util.text.BasicTextEncryptor; //Uses Jasypt Library (www.jasypt.org)
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JTextField;

/**
 *
 * @author alecramos
 */
public class mainGUI extends javax.swing.JFrame {

    /**
     * Creates new form mainGUI
     */
    public mainGUI() {
        initComponents();
        
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldUsage = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldKeyword = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxEncryption = new javax.swing.JComboBox<>();
        jCheckBoxSymbols = new javax.swing.JCheckBox();
        jCheckBoxTruncate = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldCharNum = new javax.swing.JTextField();
        jButtonEncrypt = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButtonSaveDB = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonRemoveDB = new javax.swing.JButton();
        jButtonForgot = new javax.swing.JButton();
        jTextFieldEncryptedPassword = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PassCrypt | Alec Ramos");
        setBackground(new java.awt.Color(250, 250, 250));

        jPanel1.setBackground(new java.awt.Color(200, 200, 205));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Website/Usage:");

        jTextFieldUsage.setToolTipText("e.g. \"FaceBook\", \"Company Login\", \"Personal Computer\", etc.");
        jTextFieldUsage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUsageActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Username:");

        jTextFieldUsername.setToolTipText("Username of the above field");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Keyword:");

        jTextFieldKeyword.setToolTipText("Keyword to encrypt. Can be a simple 4 character word. (e.g. \"Pass\")");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel4.setText("Encryption Type:");

        jComboBoxEncryption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Method 1", "Method 2" }));

        jCheckBoxSymbols.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jCheckBoxSymbols.setSelected(true);
        jCheckBoxSymbols.setText("Include Symbols");

        jCheckBoxTruncate.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jCheckBoxTruncate.setText("Truncate");
        jCheckBoxTruncate.setToolTipText("Truncate the password to a certain number of characters. If left unchecked, password length will be 20 by default.");
        jCheckBoxTruncate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTruncateActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel5.setText("Characters:");

        jTextFieldCharNum.setText("8");
        jTextFieldCharNum.setEnabled(false);
        jTextFieldCharNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCharNumActionPerformed(evt);
            }
        });

        jButtonEncrypt.setText("Encrypt");
        jButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel7.setText("Encrypted Password:");

        jButtonSaveDB.setText("Save to Database");
        jButtonSaveDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveDBActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(180, 180, 185));
        jSeparator1.setForeground(new java.awt.Color(135, 135, 135));

        jSeparator2.setBackground(new java.awt.Color(180, 180, 185));
        jSeparator2.setForeground(new java.awt.Color(135, 135, 135));

        jButtonRemoveDB.setText("Remove from Database");
        jButtonRemoveDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveDBActionPerformed(evt);
            }
        });

        jButtonForgot.setText("Forgot Password?");
        jButtonForgot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonForgotActionPerformed(evt);
            }
        });

        jTextFieldEncryptedPassword.setEditable(false);
        jTextFieldEncryptedPassword.setToolTipText("Encrypted password will appear here. Click to copy to clipboard");
        jTextFieldEncryptedPassword.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextFieldEncryptedPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEncryptedPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)))
                            .addComponent(jCheckBoxTruncate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldKeyword, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldUsername, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldUsage, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBoxEncryption, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCharNum, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator1)
                            .addComponent(jButtonSaveDB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonForgot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonRemoveDB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jTextFieldEncryptedPassword)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxSymbols)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jButtonEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldUsage, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxEncryption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCharNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jCheckBoxTruncate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxSymbols)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEncryptedPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButtonEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSaveDB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonForgot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRemoveDB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/passcrypt_gui/passcrypt-logo.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldUsageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUsageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldUsageActionPerformed

    private void jButtonRemoveDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveDBActionPerformed
        
        
        
        boolean connIsMade = false;
         
       try
       {
         // Step 1: "Load" the JDBC driver
         Class.forName("com.mysql.jdbc.Driver"); 
         // Step 2: Establish the connection to the database 
         String url = "jdbc:mysql://rds-mysql-passcrtpt.cqxkllauwd8o.us-east-2.rds.amazonaws.com:3306/"; 
         Connection conn = DriverManager.getConnection(url,"alecramos","242CF3457!"); 
         connIsMade = true;
        }
       catch(Exception e)
       {
            JOptionPane.showMessageDialog(null, "Error connecting to database, please try again later.", "Database Connection Error", JOptionPane.ERROR_MESSAGE);
       }
       
       if(connIsMade)
       {
            try
            {
                    // Step 1: "Load" the JDBC driver
                Class.forName("com.mysql.jdbc.Driver"); 
                // Step 2: Establish the connection to the database 
                String getRecovery = "";
                String url = "jdbc:mysql://rds-mysql-passcrtpt.cqxkllauwd8o.us-east-2.rds.amazonaws.com:3306/PassCrypt"; 
                Connection conn = DriverManager.getConnection(url,"alecramos","242CF3457!"); 
                Statement cs = conn.createStatement();

                JFileChooser fc = new JFileChooser();
                fc.setDialogTitle("Open .txt file");
                fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
                {
                    File file = fc.getSelectedFile();
                    Scanner s = new Scanner(file);
                    getRecovery = s.nextLine();
                    ResultSet sqls = cs.executeQuery("select*from Passwords where RecoveryKey=\"" + getRecovery +  "\"");


                        try
                        {
                            PreparedStatement statement = conn.prepareStatement("delete from Passwords where RecoveryKey=\"" + getRecovery +  "\"");
                            statement.executeUpdate();
                            JOptionPane.showMessageDialog(null, "Removed credentials from database", "Credentials removed", JOptionPane.INFORMATION_MESSAGE);
                           
                        }
                        catch(Exception e)
                        {
                            JOptionPane.showMessageDialog(null, "Recovery key not found in database, please try again.", "Recovery key not found", JOptionPane.ERROR_MESSAGE);
                            System.out.println(e.getMessage());
                        }
                }
                
            }
            catch (Exception e)
            {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Recovery key not found in database, please try again.", "Recovery key not found", JOptionPane.ERROR_MESSAGE);
            }
       }
        
        
        
        
    }//GEN-LAST:event_jButtonRemoveDBActionPerformed
    String recoveryKey = "";
    private void jButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptActionPerformed
        jTextFieldEncryptedPassword.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    System.out.println("Clicked");
                    StringSelection stringSelection = new StringSelection (jTextFieldEncryptedPassword.getText());
                    Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
                    clpbrd.setContents (stringSelection, null);
                    JOptionPane.showMessageDialog(null, "Password Copied to clipboard", "Password Copied", JOptionPane.INFORMATION_MESSAGE);
                }
            });
        String encryptedWord = "";
        
        if(jTextFieldUsage.getText().equals(""))
             JOptionPane.showMessageDialog(null, "Please enter a usage", "Usage required", JOptionPane.ERROR_MESSAGE);
        else if(jTextFieldUsername.getText().equals(""))
             JOptionPane.showMessageDialog(null, "Please enter a username", "Username required", JOptionPane.ERROR_MESSAGE);
        else if(jTextFieldKeyword.getText().length() < 4)
            JOptionPane.showMessageDialog(null, "Keyword must be at least 4 characters long for higher security", "Keyword too short", JOptionPane.ERROR_MESSAGE);
        else
        {
            if(jComboBoxEncryption.getSelectedItem().equals("Method 1"))
            {
                encryptedWord = hexEncrypt(jasyptEncrypt(hexEncrypt(jTextFieldKeyword.getText())));
                System.out.println("Text1:"+encryptedWord);
                String encryptedWord2 = jasyptEncrypt(hexEncrypt(jTextFieldKeyword.getText()));
                System.out.println("Text2:"+encryptedWord2);
                encryptedWord = combine(truncate(20,encryptedWord), truncate(20,encryptedWord2));
            }
            else
            {
                encryptedWord = jasyptEncrypt(hexEncrypt(jTextFieldKeyword.getText()));
                System.out.println("Before:"+encryptedWord);
                String encryptedWord2 = hexEncrypt(jasyptEncrypt(hexEncrypt(jTextFieldKeyword.getText())));
                encryptedWord = combine(truncate(20,encryptedWord), truncate(20,encryptedWord2));
            }
            
            

            if(jCheckBoxTruncate.isSelected())
                encryptedWord = truncate(Integer.parseInt(jTextFieldCharNum.getText()), encryptedWord);
//            else
//                encryptedWord = truncate(20, encryptedWord);

            if(!jCheckBoxSymbols.isSelected())
                encryptedWord = removeSymbols(encryptedWord);
            else
                encryptedWord = insertSymbols(encryptedWord);

            jTextFieldEncryptedPassword.setText(encryptedWord);
            recoveryKey = binEncrypt(jTextFieldKeyword.getText());
            recoveryKey = truncate(35, recoveryKey);


            

            try {
                writeToFile();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(mainGUI.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Lolno sry");
            }
        }
        
        
    }//GEN-LAST:event_jButtonEncryptActionPerformed

    private void jTextFieldEncryptedPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEncryptedPasswordActionPerformed
        
    }//GEN-LAST:event_jTextFieldEncryptedPasswordActionPerformed

    private void jTextFieldCharNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCharNumActionPerformed
        
    }//GEN-LAST:event_jTextFieldCharNumActionPerformed

    private void jCheckBoxTruncateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTruncateActionPerformed
        if(jCheckBoxTruncate.isSelected())
            jTextFieldCharNum.setEnabled(true);
        else
            jTextFieldCharNum.setEnabled(false);
    }//GEN-LAST:event_jCheckBoxTruncateActionPerformed

    
    
    private String combine(String text1, String text2)
    {
        String newText1 = text1.substring((text1.length()-1)/2);
        String newText2 = text2.substring((text2.length()-1)/2);
        System.out.println("text1 1/2:"+newText1);
        System.out.println("text2 1/2:"+newText2);
        
        return newText1+newText2;
    }
    
    
    
    
    
    private void jButtonSaveDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveDBActionPerformed
       boolean connIsMade = false;
       try
       {
         // Step 1: "Load" the JDBC driver
         Class.forName("com.mysql.jdbc.Driver"); 
         // Step 2: Establish the connection to the database 
         String url = "jdbc:mysql://rds-mysql-passcrtpt.cqxkllauwd8o.us-east-2.rds.amazonaws.com:3306/"; 
         Connection conn = DriverManager.getConnection(url,"alecramos","242CF3457!"); 
         connIsMade = true;
        }
       catch(Exception e)
       {
          JOptionPane.showMessageDialog(null, "Error connecting to database, " + e.getMessage() + "\nPlease try again later.", "Database Connection Error", JOptionPane.ERROR_MESSAGE);
          
       }
       
       if(connIsMade)
       {
            try
            {
                String url = "jdbc:mysql://rds-mysql-passcrtpt.cqxkllauwd8o.us-east-2.rds.amazonaws.com:3306/PassCrypt";
                Connection conn = DriverManager.getConnection(url,"alecramos","242CF3457!"); 
                Statement aStatement = conn.createStatement();
                String query = " INSERT INTO Passwords (Website_Usage, Username, Keyword, EncryptedPassword, RecoveryKey)"
                                + " values (?, ?, ?, ?, ?)";
                        PreparedStatement statement = conn.prepareStatement(query);
                        statement.setString(1, jTextFieldUsage.getText());
                        statement.setString(2, jTextFieldUsername.getText());
                        statement.setString(3, jTextFieldKeyword.getText());
                        statement.setString(4, jTextFieldEncryptedPassword.getText());
                        statement.setString(5, recoveryKey);
                        statement.executeUpdate();
                        StringSelection stringSelection = new StringSelection (recoveryKey);
                        Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
                        clpbrd.setContents (stringSelection, null);
                        JOptionPane.showMessageDialog(null, "Your password has been saved to the database. A recovery key has been added to your clipboard.\nPlease paste it in a new text (.txt) document and save it.\nShould you forget your encrypted password, click \"Forgot Password?\" and load this recovery key file to restore the password back in the program.\nYou may also use this key to remove your password from the database.", "Password Saved to Database", JOptionPane.INFORMATION_MESSAGE);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error updating database," + e.getMessage() + "\nPlease try again.", "Database Update Error", JOptionPane.ERROR_MESSAGE);
                System.out.println(e.getMessage());
            }
       }
          
        
        
    }//GEN-LAST:event_jButtonSaveDBActionPerformed

    private void jButtonForgotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonForgotActionPerformed
         boolean connIsMade = false;
         
       try
       {
         // Step 1: "Load" the JDBC driver
         Class.forName("com.mysql.jdbc.Driver"); 
         // Step 2: Establish the connection to the database 
         String url = "jdbc:mysql://rds-mysql-passcrtpt.cqxkllauwd8o.us-east-2.rds.amazonaws.com:3306/"; 
         Connection conn = DriverManager.getConnection(url,"alecramos","242CF3457!"); 
         connIsMade = true;
        }
       catch(Exception e)
       {
            JOptionPane.showMessageDialog(null, "Error connecting to database,"+ e.getMessage() + "\nPlease try again later.", "Database Connection Error", JOptionPane.ERROR_MESSAGE);
       }
       
       if(connIsMade)
       {
            try
            {
                    // Step 1: "Load" the JDBC driver
                Class.forName("com.mysql.jdbc.Driver"); 
                // Step 2: Establish the connection to the database 
                String getRecovery = "";
                String url = "jdbc:mysql://rds-mysql-passcrtpt.cqxkllauwd8o.us-east-2.rds.amazonaws.com:3306/PassCrypt"; 
                Connection conn = DriverManager.getConnection(url,"alecramos","242CF3457!"); 
                Statement cs = conn.createStatement();

                JFileChooser fc = new JFileChooser();
                fc.setDialogTitle("Open .txt file");
                fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
                {
                    File file = fc.getSelectedFile();
                    Scanner s = new Scanner(file);
                    getRecovery = s.nextLine();
                    try
                    {
                        ResultSet sqls = cs.executeQuery("select*from Passwords where RecoveryKey=\"" + getRecovery +  "\"");
                        while(sqls.next())
                        {
                         jTextFieldUsage.setText(sqls.getObject("Website_Usage").toString());
                         jTextFieldUsername.setText(sqls.getObject("Username").toString());
                         jTextFieldKeyword.setText(sqls.getObject("Keyword").toString());
                         jTextFieldEncryptedPassword.setText(sqls.getObject("EncryptedPassword").toString());
                         JOptionPane.showMessageDialog(null, "Recovery key found! Loaded credentials into program!", "Recovery key found!", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null, "Recovery key not found in database, please try again.", "Recovery key not found", JOptionPane.ERROR_MESSAGE);
                        System.out.println(e.getMessage());
                    }
                }
                
            }
            catch (Exception e)
            {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Recovery key not found in database, please try again.", "Recovery key not found", JOptionPane.ERROR_MESSAGE);
            }
       }
    }//GEN-LAST:event_jButtonForgotActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainGUI().setVisible(true);
            }
        });
    }
    
    public static String hexEncrypt(String text)
	{
//------Initialization of encryption process----------------------------------------------------------
		String converted = "";
		String newPass = "";
		
//------Converts text to hexadecimal----------------------------------------------------------------------------
		for(int i = 0; i < text.length(); i++)
		{
			char tempChar = text.charAt(i);
			int tempInt = tempChar;
			String tempHex = Integer.toHexString(tempInt);
			converted += tempHex;
		}
		
//------Creates an array of the converted keyword; swaps each hexadecimal character----------------------------------------------------------------
		String textArray[] = converted.split("");
		if((textArray.length) % 2 == 0)
		{
			for(int i = 1; i < textArray.length; i+=2)
			{
				String temp = "";
				temp = textArray[i];
				textArray[i] = textArray[i-1];
				textArray[i-1] = temp;
			}	
		}
                else
                    System.out.println("Didn't pass");
	
//------------------------------------------------------------------------------------
//------Combines each element in the array into a string of characters, making the encrypted password.-------------------------------------------------
            for (String textArray1 : textArray) {
                newPass += textArray1;
            }
		return newPass;
	}
    
    
    
    public static String jasyptEncrypt(String ex)
    {
        BasicTextEncryptor te = new BasicTextEncryptor();
        te.setPassword(ex);
        return te.encrypt(ex);
    }
    
    public static String removeSymbols(String text)
    {
        char[] brokenWord = {};
        String noSymbs = "";
        brokenWord=text.toCharArray();
        for(char element: brokenWord)
        {
            if(!isSymbol(element))
            {
                noSymbs+=element;
            }
        }
        return noSymbs;
    }
    
    public void writeToFile() throws FileNotFoundException
    {
        //check if file exists in path
        PrintWriter pw = new PrintWriter("passwords.csv");
        pw.print("Website/Usage,Username,Encrypted Password\n");
        pw.print(jTextFieldUsage.getText()+","+jTextFieldUsername.getText()+","+jTextFieldEncryptedPassword.getText());
        pw.close();
        
    }
    
    public static String truncate(int characters, String text)
    {
        return text.substring(text.length()-characters);
    }
    
    public static String insertSymbols(String text)
    {
        String newString = "";
        int randomNum = 0;
        boolean hasSymbol = false;
        char[] charArray = text.toCharArray();
        for(char c: charArray)
        {
            try
            {
                randomNum = Integer.parseInt(Character.toString(c));
            }
            catch(Exception e)
                    {
                        
                    }
        }
        for(char c: charArray)
        {
            if(isSymbol(c))
            {
                return text;
            }
        }
        if(!hasSymbol)
        {
            charArray[randomNum] = '!';
            charArray[charArray.length-1] = (char) randomWithRange(33, 45);
            charArray[(charArray.length-1)/2] = (char) randomWithRange(91, 96);
        }
        for(char c: charArray)
        {
            newString+=c;
        }
        return newString;
    }
    
    private static boolean isSymbol(char charThing)
    {
            return ((int)charThing >= 33 && (int)charThing <= 47) ||
                    ((int)charThing >= 58 && (int)charThing <= 64) ||
                    ((int)charThing >= 91 && (int)charThing <= 96) ||
                    ((int)charThing >= 123 && (int)charThing <= 127);
    }
    
   private static int randomWithRange(int min, int max)
   {
        int range = (max - min) + 1;     
        return (int)(Math.random() * range) + min;
   }
    
    public static String binEncrypt(String text)
    {
       // Charset UTF_8 = Charset.forName("UTF-8");
        String binText = "";
        BasicTextEncryptor be = new BasicTextEncryptor();
        be.setPassword(text);
        String binThing = "";
        for(char c: text.toCharArray())
        {
            binThing+= Integer.toBinaryString(c);
        }
       // System.out.println(binThing);
        for(char c: binThing.toCharArray())
        {
            if(c=='1')
                binText+="one";
            else
                binText+="zero";        
        }
        return hexEncrypt(be.encrypt(binText));         
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEncrypt;
    private javax.swing.JButton jButtonForgot;
    private javax.swing.JButton jButtonRemoveDB;
    private javax.swing.JButton jButtonSaveDB;
    private javax.swing.JCheckBox jCheckBoxSymbols;
    private javax.swing.JCheckBox jCheckBoxTruncate;
    private javax.swing.JComboBox<String> jComboBoxEncryption;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextFieldCharNum;
    private javax.swing.JTextField jTextFieldEncryptedPassword;
    private javax.swing.JTextField jTextFieldKeyword;
    private javax.swing.JTextField jTextFieldUsage;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
}
